-- Tabela de Usuários

CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    idade NUMBER(3) CHECK (idade >= 18),
    motivacao VARCHAR2(255),
    email VARCHAR2(150) UNIQUE NOT NULL,
    cpf VARCHAR2(14) UNIQUE NOT NULL,
    endereco VARCHAR2(255)
);

-- Tabela de Metas

CREATE TABLE goals (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(100) NOT NULL,
    descricao VARCHAR2(255),
    is_completed NUMBER(1) DEFAULT 0,
    user_id NUMBER NOT NULL,
    criado_em  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela de Hábitos

CREATE TABLE habits (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    goal_id NUMBER NOT NULL,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_goal FOREIGN KEY (goal_id) REFERENCES goals(id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX idx_users_email ON users(email);
CREATE UNIQUE INDEX idx_users_cpf ON users(cpf);

-- Populando Dados paa realizar Testes

INSERT INTO users (nome, idade, motivacao, email, cpf, endereco) 
VALUES ('John Doe', 30, 'Energia Sustentável', 'john.doe@example.com', '123.456.789-00', 'Rua Verde, 123');

INSERT INTO goals (title, descricao, is_completed, user_id) 
VALUES ('Economizar Energia', 'Desligar luzes ao sair', 0, 1);

INSERT INTO habits (nome, goal_id) 
VALUES ('Desligar luzes ao sair', 1);

--- Função

CREATE OR REPLACE FUNCTION validate_cpf(p_cpf IN VARCHAR2)
RETURN NUMBER
IS
    valid_format NUMBER;
BEGIN
    -- Valida se o CPF está no formato XXX.XXX.XXX-XX
    IF REGEXP_LIKE(p_cpf, '^\d{3}\.\d{3}\.\d{3}-\d{2}$') THEN
        valid_format := 1; -- CPF válido
    ELSE
        valid_format := 0; -- CPF inválido
    END IF;
    RETURN valid_format;
END;
/

-- Testando a Função de validar o CPF

SELECT validate_cpf('123.456.789-00') FROM dual;

--- Procdure INSERIR USUÁRIO

CREATE OR REPLACE PROCEDURE insert_user (
    p_nome IN VARCHAR2,
    p_idade IN NUMBER,
    p_motivacao IN VARCHAR2,
    p_email IN VARCHAR2,
    p_cpf IN VARCHAR2,
    p_endereco IN VARCHAR2
)
IS
BEGIN
    -- Valida o CPF antes de inserir
    IF validate_cpf(p_cpf) = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'CPF inválido.');
    END IF;

    -- Insere o usuário
    INSERT INTO users (nome, idade, motivacao, email, cpf, endereco)
    VALUES (p_nome, p_idade, p_motivacao, p_email, p_cpf, p_endereco);
    
    COMMIT;
END;
/

-- Testando o meu Procedure

BEGIN
    insert_user('Lucca Doe', 21, 'Energia Sustentável', 'lucca.doe@example.com', '147.456.753-00', 'Rua Azul, 123');
END;

--- Procedure EXPORTAR JSON

CREATE OR REPLACE PROCEDURE export_goals(p_user_id IN NUMBER, p_result OUT CLOB)
IS
    user_goals CLOB;
BEGIN
    SELECT JSON_OBJECT(
               'user' VALUE JSON_OBJECT(
                   'id' VALUE u.id,
                   'nome' VALUE u.nome
               ),
               'goals' VALUE JSON_ARRAYAGG(
                   JSON_OBJECT(
                       'id' VALUE g.id,
                       'title' VALUE g.title,
                       'descricao' VALUE g.descricao,
                       'is_completed' VALUE g.is_completed
                   )
               )
           )
    INTO user_goals
    FROM users u
    JOIN goals g ON u.id = g.user_id
    WHERE u.id = p_user_id
    GROUP BY u.id, u.nome;

    p_result := user_goals;
END;
/

-- Testando o export

DECLARE
    result CLOB;
BEGIN
    export_goals(1, result);
    DBMS_OUTPUT.PUT_LINE(result);
END;

--- Procedure Inserir Meta (goal)

CREATE OR REPLACE PROCEDURE insert_goal(
    p_title IN VARCHAR2,
    p_descricao IN VARCHAR2,
    p_user_id IN NUMBER
)
IS
    v_user_count NUMBER;
BEGIN
    -- Verifica se o usuário existe
    SELECT COUNT(*)
    INTO v_user_count
    FROM users
    WHERE id = p_user_id;

    IF v_user_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Usuário não encontrado.');
    END IF;

    -- Insere a meta
    INSERT INTO goals (title, descricao, user_id, is_completed)
    VALUES (p_title, p_descricao, p_user_id, 0);
    
    COMMIT;
END;
/


-- Testando

BEGIN
    insert_goal('Economizar Energia', 'Desligar luzes ao sair', 1);
END;

--- Procedure de Inserir hábitos

CREATE OR REPLACE PROCEDURE insert_habit(
    p_nome IN VARCHAR2,
    p_goal_id IN NUMBER
)
IS
    v_goal_count NUMBER; -- 
BEGIN
    -- Verifica se a meta existe
    SELECT COUNT(*)
    INTO v_goal_count
    FROM goals
    WHERE id = p_goal_id;

    IF v_goal_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'Meta não encontrada.');
    END IF;

    -- Insere o hábito
    INSERT INTO habits (nome, goal_id)
    VALUES (p_nome, p_goal_id);
    
    COMMIT;
END;
/



-- Testando 

BEGIN
    insert_habit('Desligar o ventilador ao sair', 1);
END;

SELECT COUNT(*)
INTO v_goal_count
FROM goals
WHERE id = p_goal_id;

SELECT object_name, argument_name, position, data_type 
FROM user_arguments 
WHERE object_name = 'INSERT_HABIT';

Select * from users;


